#version 430

#define maxDepth 8

layout(local_size_x = 8, local_size_y = 8) in;

uint localID = gl_LocalInvocationID.x  + gl_LocalInvocationID.y * 8;

struct Node {
    ivec4 position;
    vec4 color;
    int halfSize;
    int sub;
};

layout(std430, binding=4) readonly buffer Octree_data {
    Node nodes[];
};

layout(rgba32f) uniform image2D img_output;

layout(location=2) uniform vec3 start_position;

layout(location=3) uniform vec2 camera_angles;

layout(location=4) uniform vec2 window_size;

layout(location=5) uniform ivec3 front_voxel;

layout(location=6) uniform ivec3 debug_voxel;

bool nodeIsLeaf(const in Node node) {
    return node.color.a != -1.0;
}

ivec3 getSubVector(const in ivec3 vec, const in Node node) {
    const ivec3 pos = node.position.xyz;
    if (vec.x < pos.x || vec.y < pos.y || vec.z < pos.z) return ivec3(-1);

    const int halfSize = node.halfSize;
    const int size = halfSize * 2;
    if (vec.x > pos.x + size || vec.y > pos.y + size || vec.z > pos.z + size) return ivec3(-1);

    ivec3 subVector = ivec3(0);
    subVector.x = vec.x >= pos.x + halfSize? 1 : 0;
    subVector.y = vec.y >= pos.y + halfSize? 1 : 0;
    subVector.z = vec.z >= pos.z + halfSize? 1 : 0;

    return subVector;
}

int getSubIndexFromSubVector(const in ivec3 vec) {
    if (min(vec.x, min(vec.y, vec.z)) < 0 || max(vec.x, max(vec.y, vec.z)) > 1) return -1;

    int subIndex = 0;
    subIndex |= (vec.x >= 1 ? 2 : 0);
    subIndex |= (vec.y >= 1 ? 4 : 0);
    subIndex |= (vec.z >= 1 ? 1 : 0);
    return subIndex;
}

int getSubIndex(const in ivec3 vec, const in Node node) {
    const ivec3 pos = node.position.xyz;
    if (vec.x < pos.x || vec.y < pos.y || vec.z < pos.z) return -1;

    const int halfSize = node.halfSize;
    const int size = halfSize * 2;
    if (vec.x > pos.x + size || vec.y > pos.y + size || vec.z > pos.z + size) return -1;

    int subIndex = 0;
    subIndex |= vec.x >= pos.x + halfSize ? 2 : 0;
    subIndex |= vec.y >= pos.y + halfSize ? 4 : 0;
    subIndex |= vec.z >= pos.z + halfSize ? 1 : 0;

    return subIndex;
}

bool findVoxel(const in ivec3 voxelPos, out vec3 color) {
    int index = 0;
    while (index != -1) {
        const Node currentNode = nodes[index];
        if (currentNode.sub == -1) {
            if (currentNode.color.a != -1.0) {
                color = currentNode.color.rgb;
                return true;
            }
            return false;
        }

        const int subIndex = getSubIndex(voxelPos, currentNode);
        if (subIndex < 0) return false;

        index = currentNode.sub + subIndex;
    }
    return false;
}

vec4 debugCast(const in vec3 rayDirection) {
    vec3 color = vec3(0);

    const vec3 rayStepSize = abs(1.0f / rayDirection);
    const ivec3 step = ivec3(sign(rayDirection));
    ivec3 voxelPos = ivec3(start_position);
    vec3 rayLength = (step * (voxelPos - start_position) + (step * 0.5) + 0.5) * rayStepSize;

    const int maxSize = nodes[0].halfSize * 2;
    bvec3 mask;
    int iter = 0;
    while (iter++ < 700) {
        mask = lessThanEqual(rayLength.xyz, min(rayLength.yzx, rayLength.zxy));
        rayLength += vec3(mask) * rayStepSize;
        voxelPos += ivec3(vec3(mask)) * step;

        if (findVoxel(voxelPos, color)) return vec4(color, 1.0);
    }
    return vec4(color, 1.0);
}

bool getNode(const in ivec3 voxelPos, const in int nodeDepth, out Node node) {
    int index = 0;
    int depth = 0;
    while (index != -1) {
        const Node currentNode = nodes[index];
        if (depth == nodeDepth) {
            node = nodes[index];
            return true;
        }

        const int subIndex = getSubIndex(voxelPos, currentNode);
        if (subIndex < 0) return false;

        index = currentNode.sub + subIndex;
        depth++;
    }

    return false;
}

vec3 insideCubeHit(
    const in vec3 localRayPosition,
    const in vec3 signedDirection,
    const in vec3 rayStepSizeSingle,
    float size
) {
    size *= 0.5;

    return -(signedDirection * (localRayPosition - size) - size) * rayStepSizeSingle;
}

vec4 castRay(const in vec3 rayDirection, const in vec3 rayStartPosition) {
    const vec3 signedDirection = sign(rayDirection);
    const vec3 rayStepSizeSingle = 1.0 / max(abs(rayDirection), 0.001);

    float size = nodes[0].halfSize * 2;

    vec3 localRayPosition = mod(rayStartPosition, size);
    vec3 voxelRayPosition = rayStartPosition - localRayPosition;

    vec3 mask;
    bool exitOctree = false;
    int depth = 0;
    float distance = 0.0;

    for (int iterations = 0; iterations < 500 && distance < 1000; iterations++) {

        if (exitOctree) {
            size *= 2.0;
            vec3 newVoxelRayPosition = floor(voxelRayPosition / size) * size;

            localRayPosition += voxelRayPosition - newVoxelRayPosition;
            voxelRayPosition = newVoxelRayPosition;

            depth--;

            exitOctree = (depth > 0) &&
                abs(
                    dot(
                        mod(voxelRayPosition / size + 0.5, 2.0)
                        - 1.0 + mask * signedDirection * 0.5,
                        mask
                    )
                ) < 0.1;
            continue;
        }

        Node node;
        if (!getNode(ivec3(voxelRayPosition), depth, node)) {
            return vec4(0);
        }

        if (node.color.a != -1.0) {
            return node.color;
        }

        if (node.sub != -1 && depth <= maxDepth) {
            depth++;
            size *= 0.5;

            const vec3 upMask = step(vec3(size), localRayPosition) * size;
            voxelRayPosition += upMask;
            localRayPosition -= upMask;
        } else if (node.sub == -1 || depth > maxDepth) {
            const vec3 hit = insideCubeHit(localRayPosition, signedDirection, rayStepSizeSingle, size);

            mask = vec3(lessThan(hit, min(hit.yzx, hit.zxy)));
            const float len = dot(hit, mask);

            distance += len;
            localRayPosition += rayDirection * len - mask * signedDirection * size;

            const vec3 newVoxelRayPosition = voxelRayPosition + mask * signedDirection * size;
            exitOctree = (floor(newVoxelRayPosition / size * 0.5) != floor(voxelRayPosition / size * 0.5))
            && (depth > 0);

            voxelRayPosition = newVoxelRayPosition;
        }
    }

    return vec4(0);
}


vec4 castWorld(const in vec3 rayDirection) {
    const float octreeSize = nodes[0].halfSize * 2.0;
    const ivec3 step = ivec3(sign(rayDirection));

    const vec3 rayStepSizeSingle = 1.0 / max(abs(rayDirection), 0.001);
    const vec3 rayStepSize = rayStepSizeSingle * octreeSize;

    ivec3 octreePosition = ivec3((start_position / octreeSize) + min(vec3(0), sign(start_position)));
    
    const float halfOctreeSize = octreeSize / 2.0;
    vec3 rayLength = -(step * (mod(start_position, octreeSize) - halfOctreeSize) - halfOctreeSize) * rayStepSizeSingle;

    vec3 mask;

    float distance = 0.0;
    for (int iterations = 0; iterations < 200; iterations++) {
        if (octreePosition == ivec3(0)) {
            return castRay(rayDirection, abs(start_position + rayDirection * distance));
        }

        mask = vec3(lessThanEqual(rayLength.xyz, min(rayLength.yzx, rayLength.zxy)));

        rayLength += mask * rayStepSize;
        distance = length(mask * (rayLength - rayStepSize));
        octreePosition += ivec3(mask) * step;
    }

    return vec4(0);
}

void rotate(inout vec3 v, const in vec3 axis, const in float theta) {
    const float cos_theta = cos(theta);
    v = (v * cos_theta) + (cross(axis, v) * sin(theta)) + (axis * dot(axis, v)) * (1 - cos_theta);
}

void main() {
    const ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.xy);
    const ivec3 screen_coord = ivec3(pixel_coord - window_size / 2, -window_size.x);

    vec3 rayDir = normalize(screen_coord);
    rotate(rayDir, vec3(1, 0, 0), camera_angles.y);
    rotate(rayDir, vec3(0, 1, 0), camera_angles.x);

    imageStore(img_output, pixel_coord, castWorld(rayDir));
}