#version 430

precision highp float;

layout(local_size_x = 8, local_size_y = 8) in;

shared struct Layer {
    vec3 position;
    int nodeIndex;
    ivec3 subVec;
    vec3 rayLength;
    float distance;
} layers[8][64];

uint localID = gl_LocalInvocationID.x  + gl_LocalInvocationID.y * 8;

struct Node {
    ivec4 position;
    vec4 color;
    int halfSize;
    int sub;
};

struct HitPoint {
    bool hit;
    vec3 color;
};

layout(std430, binding=4) readonly buffer Octree_data {
    Node nodes[];
};

layout(rgba32f) uniform image2D img_output;

layout(location=2) uniform vec3 start_position;

layout(location=3) uniform vec2 camera_angles;

layout(location=4) uniform vec2 window_size;

layout(location=5) uniform ivec3 front_voxel;

layout(location=6) uniform ivec3 debug_voxel;

int getSubIndexFromSubVector(in const ivec3 vec) {
    if (min(vec.x, min(vec.y, vec.z)) < 0 || max(vec.x, max(vec.y, vec.z)) > 1) return -1;

    int subIndex = 0;
    subIndex |= (vec.x >= 1 ? 2 : 0);
    subIndex |= (vec.y >= 1 ? 4 : 0);
    subIndex |= (vec.z >= 1 ? 1 : 0);
    return subIndex;
}

Layer calculateLayer(inout Layer layer, in const ivec3 dir, in const vec3 rayStepSizeSingle, in const int halfSize) {
    layer.subVec = clamp(ivec3(layer.position) / halfSize, 0, 1);
    layer.rayLength = (vec3(layer.subVec + dir) * float(halfSize) - layer.position) * rayStepSizeSingle;
    layer.distance = 0.0f;
    return layer;
}

void moveLayer(inout Layer currentLayer, in const ivec3 step, in const vec3 rayStepSize) {
    const vec3 mask = vec3(lessThanEqual(currentLayer.rayLength.xyz, min(currentLayer.rayLength.yzx, currentLayer.rayLength.zxy)));
    currentLayer.distance = length(mask * currentLayer.rayLength);
    currentLayer.rayLength += mask * rayStepSize;
    currentLayer.subVec += ivec3(mask) * step;
}

vec4 castRay(in vec3 rayDirection) {
    const vec3 rayStepSizeSingle = 1.0f / rayDirection;
    const ivec3 step = ivec3(sign(rayDirection));
    const ivec3 dir = max(step, 0);
    const int maxDepth = 8;

    int currentDepth = maxDepth - 1;
    Layer currentLayer;
    Node currentNode = nodes[0];
    currentLayer.nodeIndex = 0;
    currentLayer.position = start_position;

    int halfSize = currentNode.halfSize;
    layers[currentDepth][localID] = calculateLayer(currentLayer, dir, rayStepSizeSingle, halfSize);
    vec3 rayStepSize = vec3(halfSize) * abs(rayStepSizeSingle);

    int iter = 0;

    while (iter++ < 500) {
        currentLayer = layers[currentDepth][localID];
        currentNode = nodes[currentLayer.nodeIndex];

        const int subIndex = getSubIndexFromSubVector(currentLayer.subVec);
        if (subIndex < 0) {
            currentDepth++;
            if (currentDepth == maxDepth) return vec4(0, 0, 0, 0);
            rayStepSize *= 2;
            halfSize *= 2;
        } else if (currentNode.sub != -1) {
            const int subNodexIndex = currentNode.sub + subIndex;
            currentNode = nodes[subNodexIndex];
            if (currentNode.color.a != -1.0f) {
                //if (debug_voxel == ivec3(currentNode.position)) {
                //    return vec4(1, 0, 0, 1);
                //} else
                if (front_voxel == ivec3(currentNode.position)) {
                    return vec4(1, 1, 0, 1);
                }
                return currentNode.color;//vec4(10.0f / iter, 10.0f / iter, 10.0f / iter, 1.0f);
            }
            if (currentDepth != 0) { // If currentDepth == 0 this node empty and have voxel neighbour
                // Start subRaycast
                Layer newLayer;

                currentDepth--;
                rayStepSize *= 0.5f;
                halfSize /= 2;

                newLayer.nodeIndex = subNodexIndex;
                newLayer.position = currentLayer.position + currentLayer.distance * rayDirection - vec3(halfSize * 2 * currentLayer.subVec);
                layers[currentDepth][localID] = calculateLayer(newLayer, dir, rayStepSizeSingle, halfSize);
                continue;
            }
        }
        moveLayer(layers[currentDepth][localID], step, rayStepSize);
    }
    return vec4(0, 0, 0, 0);
}

bool nodeIsLeaf(in Node node) {
    return node.color.a != -1.0f;
}

ivec3 getSubVector(in ivec3 vec, in Node node) {
    ivec3 subVector = ivec3(0, 0, 0);

    const ivec3 pos = node.position.xyz;
    if (vec.x < pos.x) return ivec3(-1, -1, -1);
    if (vec.y < pos.y) return ivec3(-1, -1, -1);
    if (vec.z < pos.z) return ivec3(-1, -1, -1);

    const int halfSize = node.halfSize;
    const int size = halfSize * 2;
    if (vec.x > pos.x + size) return ivec3(-1, -1, -1);
    if (vec.y > pos.y + size) return ivec3(-1, -1, -1);
    if (vec.z > pos.z + size) return ivec3(-1, -1, -1);

    subVector.x = vec.x >= pos.x + halfSize? 1 : 0;
    subVector.y = vec.y >= pos.y + halfSize? 1 : 0;
    subVector.z = vec.z >= pos.z + halfSize? 1 : 0;

    return subVector;
}

int getSubIndex(in ivec3 vec, in Node node) {
    int subIndex = 0;

    const ivec3 pos = node.position.xyz;
    if (vec.x < pos.x) return -1;
    if (vec.y < pos.y) return -2;
    if (vec.z < pos.z) return -3;

    const int halfSize = node.halfSize;
    const int size = halfSize * 2;
    if (vec.x > pos.x + size) return -4;
    if (vec.y > pos.y + size) return -5;
    if (vec.z > pos.z + size) return -6;

    subIndex |= vec.x >= pos.x + halfSize? 2 : 0;
    subIndex |= vec.y >= pos.y + halfSize? 4 : 0;
    subIndex |= vec.z >= pos.z + halfSize? 1 : 0;

    return subIndex;
}

bool findVoxel(in ivec3 voxelPos, out vec3 color) {
    int index = 0;
    while(index != -1) {
        const Node currentNode = nodes[index];
        if (currentNode.sub == -1) {
            if (nodeIsLeaf(currentNode)) {
                color = currentNode.color.rgb;
                return true;
            }
            return false;
        }

        const int subIndex = getSubIndex(voxelPos, currentNode);
        if (subIndex < 0) return false;

        index = currentNode.sub + subIndex;
    }
    return false;
}

vec4 debugCast(in vec3 rayDirection) {
    vec3 color = vec3(0);

    const vec3 rayStepSize = abs(1.0f / rayDirection);
    const ivec3 step = ivec3(sign(rayDirection));
    ivec3 voxelPos = ivec3(start_position);
    vec3 rayLength = (step * (voxelPos - start_position) + (step * 0.5f) + 0.5f) * rayStepSize;

    const int maxSize = nodes[0].halfSize * 2;
    bvec3 mask;
    int iter = 0;
    while(iter++ < 400) {
        mask = lessThanEqual(rayLength.xyz, min(rayLength.yzx, rayLength.zxy));
        rayLength += vec3(mask) * rayStepSize;
        voxelPos += ivec3(vec3(mask)) * step;

//        if (debug_voxel == ivec3(voxelPos)) {
//            return vec4(1, 0, 0, 1);
//        } else if (front_voxel == ivec3(voxelPos)) {
//            return vec4(1, 1, 0, 1);
//        }

        if (findVoxel(voxelPos, color)) {
            return vec4(color, 1.0f);
        }
    }
    return vec4(color, 1.0f);
}

void rotate(inout vec3 v, const in vec3 axis, float theta) {
    const float cos_theta = cos(theta);
    v = (v * cos_theta) + (cross(axis, v) * sin(theta)) + (axis * dot(axis, v)) * (1 - cos_theta);
}

void main() {
    const ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.xy);
    const ivec3 screen_coord = ivec3(pixel_coord - ivec2(window_size.x / 2, window_size.y / 2), window_size.x);

    vec3 rayDir = normalize(screen_coord);
    rotate(rayDir, vec3(1, 0, 0), camera_angles.y);
    rotate(rayDir, vec3(0, 1, 0), camera_angles.x);

    imageStore(img_output, pixel_coord, castRay(rayDir));
}


/*
bool nodeIsLeaf(in Node node) {
    return node.color.a != -1.0f;
}

ivec3 getSubVector(in ivec3 vec, in Node node) {
    ivec3 subVector = ivec3(0, 0, 0);

    const ivec3 pos = node.position.xyz;
    if (vec.x < pos.x) return ivec3(-1, -1, -1);
    if (vec.y < pos.y) return ivec3(-1, -1, -1);
    if (vec.z < pos.z) return ivec3(-1, -1, -1);

    const int halfSize = node.halfSize;
    const int size = halfSize * 2;
    if (vec.x > pos.x + size) return ivec3(-1, -1, -1);
    if (vec.y > pos.y + size) return ivec3(-1, -1, -1);
    if (vec.z > pos.z + size) return ivec3(-1, -1, -1);

    subVector.x = vec.x >= pos.x + halfSize? 1 : 0;
    subVector.y = vec.y >= pos.y + halfSize? 1 : 0;
    subVector.z = vec.z >= pos.z + halfSize? 1 : 0;

    return subVector;
}

int getSubIndex(in ivec3 vec, in Node node) {
    int subIndex = 0;

    const ivec3 pos = node.position.xyz;
    if (vec.x < pos.x) return -1;
    if (vec.y < pos.y) return -2;
    if (vec.z < pos.z) return -3;

    const int halfSize = node.halfSize;
    const int size = halfSize * 2;
    if (vec.x > pos.x + size) return -4;
    if (vec.y > pos.y + size) return -5;
    if (vec.z > pos.z + size) return -6;

    subIndex |= vec.x >= pos.x + halfSize? 2 : 0;
    subIndex |= vec.y >= pos.y + halfSize? 4 : 0;
    subIndex |= vec.z >= pos.z + halfSize? 1 : 0;

    return subIndex;
}

bool findVoxel(in ivec3 voxelPos, inout HitPoint result) {
    int index = 0;
    while(index != -1) {
        const Node currentNode = nodes[index];
        if (currentNode.sub == -1) {
            if (nodeIsLeaf(currentNode)) {
                result.hit = true;
                result.color = currentNode.color.rgb;
                return true;
            }
            return true;
        }

        const int subIndex = getSubIndex(voxelPos, currentNode);
        if (subIndex < 0) return false;

        index = currentNode.sub + subIndex;
    }
    return false;
}

vec4 debugCast(in vec3 rayDirection) {
    HitPoint result;
    result.hit = false;

    const vec3 rayStepSize = abs(1.0f / rayDirection);
    vec3 rayLength;
    ivec3 voxelPos = ivec3(start_position);
    ivec3 step = ivec3(sign(rayDirection));
    int nodeSize = nodes[0].halfSize * 2;
    rayLength = (step * (voxelPos - start_position) + (step * 0.5f) + 0.5f) * rayStepSize;

    const int maxSize = nodeSize;
    bvec3 mask;
    int iter = 0;
    while(iter++ < 500) {
        mask = lessThanEqual(rayLength.xyz, min(rayLength.yzx, rayLength.zxy));
        rayLength += vec3(mask) * rayStepSize;
        voxelPos += ivec3(vec3(mask)) * step;

        if (findVoxel(voxelPos, result) && result.hit) {
            return vec4(100.0f / iter, 100.0f / iter, 100.0f / iter, 1.0f);
        }

        if (front_voxel == voxelPos) {
            result.hit = true;
            result.color.g = 1.0f;
            result.color.b = 0;
            result.color.r = 1.0f;
            return vec4(result.color, 1.0f);
        }
    }
    return vec4(result.color, 1.0f);
}
*/